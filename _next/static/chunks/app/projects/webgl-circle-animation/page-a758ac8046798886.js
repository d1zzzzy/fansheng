(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[777],{7724:(n,e,o)=>{Promise.resolve().then(o.bind(o,6414))},6414:(n,e,o)=>{"use strict";o.r(e),o.d(e,{default:()=>c});var t=o(5155),s=o(2115),r=o(579);function c(){let n=(0,s.useRef)(null),[e,o]=(0,s.useState)(null);return(0,s.useLayoutEffect)(()=>{(async function(){if(n.current){let e=new r.lgM;await e.init({canvas:n.current,width:1024,height:800,backgroundColor:0xffffff,preference:"webgl"});let t=new r.V23({attributes:{aPosition:[0,0,1024,0,1024,800,0,800,1024,800,0,0]}}),s=r.Mtr.from({gl:{vertex:"#version 300 es\nin vec2 aPosition;\n\nout vec2 vPosition;\n\nuniform mat3 uProjectionMatrix;\nuniform mat3 uWorldTransformMatrix;\n\nvoid main() {\n  // MVP 矩阵计算\n  mat3 mvp = uProjectionMatrix * uWorldTransformMatrix;\n  gl_Position = vec4((mvp * vec3(aPosition, 1.0)).xy, 0.0, 1.0);\n\n  vPosition = aPosition;\n}\n",fragment:"#version 300 es\n\nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 outColor;\n\nuniform vec2 uSize;\nuniform float uTime;\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat noise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n  i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n  + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n  dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat hue2rgb(float f1, float f2, float hue) {\n  if (hue < 0.0)\n  hue += 1.0;\n  else if (hue > 1.0)\n  hue -= 1.0;\n  float res;\n  if ((6.0 * hue) < 1.0)\n  res = f1 + (f2 - f1) * 6.0 * hue;\n  else if ((2.0 * hue) < 1.0)\n  res = f2;\n  else if ((3.0 * hue) < 2.0)\n  res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n  else\n  res = f1;\n  return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n  vec3 rgb;\n\n  if (hsl.y == 0.0) {\n    rgb = vec3(hsl.z); // Luminance\n  } else {\n    float f2;\n\n    if (hsl.z < 0.5)\n    f2 = hsl.z * (1.0 + hsl.y);\n    else\n    f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n\n    float f1 = 2.0 * hsl.z - f2;\n\n    rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n    rgb.g = hue2rgb(f1, f2, hsl.x);\n    rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n  }\n  return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n  return hsl2rgb(vec3(h, s, l));\n}\n\nvoid main() {\n  float canvasWidth = uSize.x;\n  float canvasHeight = uSize.y;\n  float aspect = canvasWidth / canvasHeight;\n\n  float size = canvasWidth / aspect;\n\n  vec2 position = vec2(vPosition.x / size, vPosition.y / size);\n  vec2 center = position - vec2(0.5 * aspect, 0.5);\n  center.x *= aspect;\n\n  float dist = length(center);\n\n  vec3 colorA = vec3(0.149,0.141,0.912);\n  vec3 colorB = vec3(1.000,0.833,0.224);\n\n  float alpha = smoothstep(0.25, 0.2475, dist);\n\n  float n = noise(vec3(center * 0.2, uTime * 0.1));\n  float pct = abs(sin(uTime));\n\n  vec3 color = hsl2rgb(\n    0.2 + n * 0.5,\n    0.5,\n    0.5\n  );\n\n  outColor = vec4(color, alpha);\n}\n"},resources:{shaderUniforms:{uTime:{value:0,type:"f32"},uSize:{value:[1024,800],type:"vec2<f32>"}}}}),c=new r.eaF({geometry:t,shader:s});c.width=1024,c.height=800,c.x=0,c.y=0,e.stage.addChild(c),e.ticker.add(()=>{s.resources.shaderUniforms.uniforms.uTime+=e.ticker.elapsedMS/1e3}),o(e)}})().then(()=>{})},[]),(0,s.useEffect)(()=>()=>{e&&e.destroy()},[e]),(0,t.jsxs)("main",{className:"page flex flex-col justify-center items-center p-24",children:[(0,t.jsx)("h1",{className:"text-4xl font-bold text-center",children:"Shader Noise Animation"}),(0,t.jsx)("div",{className:"flex justify-center w-full mx-auto",children:(0,t.jsx)("canvas",{ref:n,id:"webgl",className:"w-80per h-80per shadow-sm"})})]})}}},n=>{var e=e=>n(n.s=e);n.O(0,[579,441,517,358],()=>e(7724)),_N_E=n.O()}]);